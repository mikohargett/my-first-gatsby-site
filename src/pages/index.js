// Step 1: Import React
import * as React from "react"
import Layout from '../components/layout'

// Step 2: Define component 
const IndexPage = () => {
  return (
    <Layout pageTitle="Home Page">
      <p>I'm making this by following the Gatsby tutorial.</p>
    </Layout>
  )
}

/* Gatsby's Head API lets you define a <title> and other document metadata
which you export to apply to the page */ 
export const Head = () => <title>Home Page</title>

// Step 3: Export your component
export default IndexPage

/* 
CSS Modules: Gatsby isn't strict about what styling approach you use. Here we'll use CSS Modules to style the components, meaning styles will be scoped to components which helps avoid class naming collisions between components. Gatsby is automatically configured to do this, no extra setup necessary.

To define styles using CSS Modules, put your CSS in a file that ends with the file extension .module.css. This tells Gatsby this CSS file should be processed as a CSS Module rather than plain CSS. 

Within the CSS file, create separate CSS classes for each element you want to style, then in the my-component.js file, import each class separately and apply it to the corresponding React element. 

For example, in my-component.modules.css you create a class for each element you want to style: 

.title {
    color: blue;
    font-size: 3rem;
}

Then, in your component .js file, import each class separately and apply it to the corresponding React element. 

import * as React from 'react'
import { title } from './my-component.module.css'

const MyComponent = () => {
  return (
    <h1 className={title}>
      Super Sweet Title Page
    </h1>
  )
}

export default MyComponent

If you open the dev console in the web browser and inspect the <h1> element (which I am unable to do because it's not applied but I see it in the tutorial example), you'll see a long classname generated by CSS Modules. This is guaranteed to be unique across the site even if there's also another component with a .title class in its module.css. That's one of the reasons CSS Modules are a popular styling approach: they let you write CSS scoped to your components so you don't have to worry about selector name collisions between components. 

*/